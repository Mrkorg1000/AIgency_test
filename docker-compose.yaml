version: '3.8'

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - lead-triage-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - lead-triage-network

  adminer:
    image: adminer
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - lead-triage-network

  # Сервис для миграций
  alembic:
    build:
      context: .
      dockerfile: alembic/Dockerfile
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
    depends_on:
      - postgres
    networks:
      - lead-triage-network
    command: ["sh", "-c", "mkdir -p migrations/versions; if [ -z \"$(ls -A migrations/versions 2>/dev/null)\" ]; then alembic -c alembic.ini revision --autogenerate -m 'init'; fi; alembic -c alembic.ini upgrade head"]

  intake-api:
    build:
      context: .
      dockerfile: intake_api/Dockerfile
    ports:
      - "8000:8000"
    environment:
      # PostgreSQL отдельные переменные
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      # Redis
      - REDIS_URL=redis://redis:6379/0
      - REDIS_STREAM=${REDIS_STREAM}
      - REDIS_CONSUMER_GROUP=${REDIS_CONSUMER_GROUP}
      - MAX_CONCURRENT_REQUESTS=${MAX_CONCURRENT_REQUESTS}
      - BATCH_SIZE=${BATCH_SIZE}
      - STREAM_BLOCK_TIME=${STREAM_BLOCK_TIME}
      - LLM_ADAPTER=${LLM_ADAPTER}
    depends_on:
      - postgres
      - redis
      # - migrations
    networks:
      - lead-triage-network

  insights-api:
    build:
      context: .
      dockerfile: insights_api/Dockerfile
    ports:
      - "8001:8001"
    environment:
      # PostgreSQL отдельные переменные
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      # Redis
      - REDIS_URL=redis://redis:6379/0
      - REDIS_STREAM=${REDIS_STREAM}
      - REDIS_CONSUMER_GROUP=${REDIS_CONSUMER_GROUP}
      - MAX_CONCURRENT_REQUESTS=${MAX_CONCURRENT_REQUESTS}
      - BATCH_SIZE=${BATCH_SIZE}
      - STREAM_BLOCK_TIME=${STREAM_BLOCK_TIME}
      - LLM_ADAPTER=${LLM_ADAPTER}
    depends_on:
      - postgres
      - redis
      # - migrations
    networks:
      - lead-triage-network

  triage-worker:
    build:
      context: .
      dockerfile: triage_worker/Dockerfile
    environment:
      # PostgreSQL отдельные переменные
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      # Redis
      - REDIS_URL=redis://redis:6379/0
      - REDIS_STREAM=${REDIS_STREAM}
      - REDIS_CONSUMER_GROUP=${REDIS_CONSUMER_GROUP}
      - MAX_CONCURRENT_REQUESTS=${MAX_CONCURRENT_REQUESTS}
      - BATCH_SIZE=${BATCH_SIZE}
      - STREAM_BLOCK_TIME=${STREAM_BLOCK_TIME}
      - LLM_ADAPTER=${LLM_ADAPTER}
    depends_on:
      - postgres
      - redis
      # - migrations
    networks:
      - lead-triage-network

volumes:
  postgres_data:

networks:
  lead-triage-network:
    driver: bridge